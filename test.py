# =======================Завдання 1/Task_1 ==================
#++++++++++++++++++++++++Умова/Condition+++++++++++++++++++++++

# Напишіть програму, яка буде виконувати найпростіші математичні операції з числами послідовно,
#  приймаючи від користувача операнди (числа) та оператор.
# Умови для цієї задачі
# Додаток працює з цілими та дійсними числами.
# Додаток вміє виконувати такі математичні операції:
# ДОДАВАННЯ (+)
# ВІДНІМАННЯ(-)
# МНОЖЕННЯ (*)
# ДІЛЕННЯ (/)
# Програма приймає один операнд або один оператор за один цикл запит-відповідь.
# Всі операції програма виконує в порядку надходження — одну за одною.
# Програма виводить результат обчислень, коли отримує від користувача символ =.
# Додаток закінчує роботу після того, як виведе результат обчислення.
# Користувач по черзі вводить числа та оператори.
# Якщо користувач вводить оператор двічі поспіль, він отримує повідомлення про помилку і може ввести повторно.
# Якщо користувач вводить число двічі поспіль, він отримує повідомлення про помилку і може ввести повторно.
# Додаток коректно опрацьовує ситуацію некоректного введення (exception).
# Початкові змінні:

# result = None
# operand = None
# operator = None
# wait_for_number = True
# result — сюди поміщаємо підсумковий результат operand — завжди зберігає поточне число operator — рядковий параметр, може містити чотири значення, "+", "-", "*", "/" wait_for_number — прапорець, який вказує, що очікують на вводі оператор (operator) або операнд (operand)
# Приклад виконання програми:
# >>> 3
# >>> +
# >>> 3
# >>> 2
# 2 is not '+' or '-' or '/' or '*'. Try again
# >>> -
# >>> -
# '-' is not a number. Try again.
# >>> 5
# >>> *
# >>> 3
# >>> =
# Result: 3.0

# Тестові послідовності:

# Перша: ["10", "+", "5", "6", "/", "3", "-", "a", "2", "*", "6", "= "], результат 18.0
# Друга: ["2", "3", "-", "1", "+", "10", "*", "2", "="], результат 22.0

# +++++++++++++++++Код/Code+++++++++++++++++++++++++++++++++++


    
operand = None # оголошення зміної для значення чисел введених з клавіатури 
operator = None # оголошення зміної для матиматичного обрахунку (+ , - , * , / ) або = для виведення результату і завершення  введених з клавіатури
wait_for_number =True # пропоноване значеннядля автоперевірки  яке не використовую , замість нього використовую зміну condition . 


list =[]  # Створюємо пустий список в який будемо записувати послідовно всі числа і знаки дії в форматі [*число, *знак , *число , *знак,.....]



def sum (a, b) : # функція додавання власна .

    return round (a + b,3) # повертаємо заокругленні значення оскільки будемо працювати з значеннями з пламаючою комою . 
                           # Без заокруглення може не віро обраховувати , особливість роботи з даними типу float в рограмуванні.
                           # приклад 0.5 + 0.7 = 1.29999999999999999 а не 1.3 , якщо заокруглити то все буде ок 1.3
                           # round(*значення яке потрібно заокруглити , * кількість знаків після коми які птрібно вивести ), в мові пайтон є особливість заокруглення значень рівних 0.5 ( одни раз заокруглює в більшу сторону ,наступний раз 0,5 заокруглює в меншу сторону . потрібно це враховувати .) 
                           # приклад round(0.5 + 0.5 +0.5 + 0.5 + 0.5) - видасть 2 а не 3 як матиматично малоб бути . оскльки на третьому додаванні 0.5 ,воно 1.5 заокруглило до 2 то на пятому 0.5 випадку  2.5 ,воно закоруглить в меншу сторону до 2 . 

def riz (a, b) : # функція віднімання власна .

    return round (a - b,3) #  повертаємо заокругленні значення оскільки будемо працювати з значеннями з пламаючою комою .
                           # як парцює round () -дивись в описі про додавання  * def sum (a, b) :

def dobutok (a, b) : # функція множення власна .

    return round (a * b,3) #  повертаємо заокругленні значення оскільки будемо працювати з значеннями з пламаючою комою .
                           # як парцює round () -дивись в описі про додавання  * def sum (a, b) :

def dil (a, b) : # функція ділення власна .

    return round (a / b,3) #  повертаємо заокругленні значення оскільки будемо працювати з значеннями з пламаючою комою .
                           # як парцює round () -дивись в описі про додавання  * def sum (a, b) :



def perevirka_num (operand) : # функція яка перевіряє чи введене значення operand є числом .Якщо ні повідомляє що символ який введено не є числом.
   
   try : # перевірка чи число .
      
      float (operand) # приводемо введене значення operand до типу float . якщо буде будь що крім чисел буде видавати помлку *ValueError: яку опрацьовуємо  через try : - expect :
      return float (operand) # повертаємо значення введене в operand
      
   except :  # якщо *float (operand) повертає помилку виводимо повідомлення.
                    
         print (f" {operand} не є числом !!!  ") # виводимо повідомлення що (виводимо значення введене в operand ) не є числом !!! за допомого f - рядка . 
                                                 # f ' *будь який текст {}  *будь який текст' 


def perevirka_znak () :

    print(f'Для завершення обрахунку = ')

    operator = input ("Введіть знак : ")
    
    if operator =="+" or operator =="*" or operator =="-" or operator =="/" or operator =="=" :

        return operator
    
    else :

        print(f"{operator} - не є знак +,-,*,/")

def  perevirka_end(znak,count):
    
    condition=True
    while condition:

        if znak=="=" or count<=1:
            if count==0:
                print(f"\nВи невели числа для виконання обрахунку \nВи бажаєте завершити ? \nТак , натисніть '=' \n")
            count+=1
            znak = input("""введіть "="" для завершення """)
            if znak=="=":
                    print("Вихід")
                    condition=False
                    return condition
            
                
        
   
condition=True 
count=0   

while condition :
   
   operand=input("Введіть число : ")
   
   if perevirka_num(operand)!=None :
        
        list.append(perevirka_num(operand))

        

        while condition :

            znak= perevirka_znak()

            if znak=="+" or znak=="*" or znak=="-" or znak=="/"  :
                #print(znak)
                #print(count)
                list.append(znak)
                count+=1
                #print(list)
                break
          
              
            condition = perevirka_end(znak,count)
                
            
            
           
          
          
              
if len(list)>2:
    result=list[0]
    a=0   
        
    for x in list:
        
        if x=="+":
            a=a+2
            result=sum(result,list[a])
            
            
        if x=="*":
            a=a+2
            result=dobutok(result,list[a])
            
        
        if x=="-":
            a=a+2
            result=riz(result,list[a])
            
            

        if x=="/" :
            a=a+2
            result=dil(result,list[a])
            
        
    print(result)
else:
        print(f"Ви ввели недостатньо значень для обрахунку ")